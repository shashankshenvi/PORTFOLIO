package com.portfolio.service;

import com.portfolio.exception.ResourceNotFoundException;
import com.portfolio.repository.UserDetailsRepository;
import com.portfolio.vo.UserDetails;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.util.List;

@Service
public class UserDetailsServiceImpl implements UserDetailsService {

    @Autowired
    private UserDetailsRepository userDetailsRepository;

    @Autowired
    private GoogleDriveService googleDriveService;

    @Override
    public List<UserDetails> getAllUserDetails() {
        return userDetailsRepository.findByIsActive('Y');
    }

    @Override
    public UserDetails createUser(UserDetails user, MultipartFile resumeFile) {
        if (resumeFile != null && !resumeFile.isEmpty()) {
            try {
                String fileId = googleDriveService.uploadFile(resumeFile);
                user.setResumePath(fileId);
            } catch (Exception e) {
                throw new RuntimeException("Failed to upload resume", e);
            }
        }
        return userDetailsRepository.save(user);
    }

    @Override
    public UserDetails getUserById(Integer userId) {
        return userDetailsRepository.findById(userId)
                .orElseThrow(() -> new ResourceNotFoundException("User not found"));
    }

    @Override
    public UserDetails updateUser(UserDetails user, MultipartFile resumeFile) {
        if (resumeFile != null && !resumeFile.isEmpty()) {
            try {
                String fileId = googleDriveService.uploadFile(resumeFile);
                user.setResumePath(fileId);
            } catch (Exception e) {
                throw new RuntimeException("Failed to upload resume", e);
            }
        }
        return userDetailsRepository.save(user);
    }

    @Override
    public void deleteUser(Integer userId) {
        userDetailsRepository.findById(userId).ifPresent(existingUser -> {
            existingUser.setIsActive('N');
            userDetailsRepository.save(existingUser);
        });
    }
}