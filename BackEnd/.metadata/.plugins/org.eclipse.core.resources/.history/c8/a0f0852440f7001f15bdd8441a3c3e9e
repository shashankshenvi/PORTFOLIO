package com.portfolio.service;

import com.portfolio.exception.ResourceNotFoundException;
import com.portfolio.repository.UserDetailsRepository;
import com.portfolio.vo.UserDetails;
import com.portfolio.vo.UserInstance;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.util.List;

@Service
public class UserDetailsServiceImpl implements UserDetailsService {
	
    private static final Logger logger = LoggerFactory.getLogger(GoogleDriveService.class);

    @Autowired
    private UserDetailsRepository userDetailsRepository;

    @Autowired
    private GoogleDriveService googleDriveService;

    @Override
    public List<UserDetails> getAllUserDetails() {
        return userDetailsRepository.findByIsActive('Y');
    }

    @Override
    public UserDetails createUser(UserDetails user, MultipartFile resumeFile) {
        // Upload resume file to Google Drive if present
        if (resumeFile != null && !resumeFile.isEmpty()) {
            try {
                String fileId = googleDriveService.uploadFile(resumeFile);
                user.setResumePath(fileId);
            } catch (Exception e) {
                throw new RuntimeException("Failed to upload resume", e);
            }
        }

        // Set user active by default
        user.setIsActive('Y');
        
        // Process the contacts and set the user reference for each contact
        if (user.getContacts() != null) {
            for (UserInstance contact : user.getContacts()) {
                contact.setUser(user);  // Set the UserDetails reference on each contact
            }
        }

        // Save the user along with contacts due to CascadeType.ALL
        return userDetailsRepository.save(user);
    }

    @Override
    public UserDetails getUserById(Integer userId) {
        return userDetailsRepository.findById(userId)
                .orElseThrow(() -> new ResourceNotFoundException("User not found"));
    }

    @Override
    public UserDetails updateUser(UserDetails user, MultipartFile resumeFile) {
        if (resumeFile != null && !resumeFile.isEmpty()) {
            try {
                String fileId = googleDriveService.uploadFile(resumeFile);
                user.setResumePath(fileId);
            } catch (Exception e) {
                throw new RuntimeException("Failed to upload resume", e);
            }
        }
        return userDetailsRepository.save(user);
    }

    @Override
    public void deleteUser(Integer userId) {
        userDetailsRepository.findById(userId).ifPresent(existingUser -> {
            existingUser.setIsActive('N');
            userDetailsRepository.save(existingUser);
        });
    }
}