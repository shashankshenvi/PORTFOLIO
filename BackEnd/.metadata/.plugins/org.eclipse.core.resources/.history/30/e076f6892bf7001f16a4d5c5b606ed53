package com.portfolio.service;

import com.portfolio.exception.ResourceNotFoundException;
import com.portfolio.repository.UserDetailsRepository;
import com.portfolio.vo.UserDetails;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class UserDetailsServiceImpl implements UserDetailsService {

    @Autowired
    private UserDetailsRepository userDetailsRepository;

    @Autowired
    private GoogleDriveService googleDriveService;

    @Override
    public List<UserDetails> getAllUserDetails() {
        return userDetailsRepository.findByIsActive('Y');
    }

    @Override
    public UserDetails createUser(UserDetails user) {
        UserDetails savedUser = userDetailsRepository.save(user);

        if (user.getResumeFilePath() != null) {
            try {
                String fileId = googleDriveService.uploadFile(user.getResumeFilePath());
                savedUser.setResumePath(fileId);
                userDetailsRepository.save(savedUser);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

        return savedUser;
    }

    @Override
    public UserDetails getUserById(Integer userId) {
        return userDetailsRepository.findById(userId)
                .orElseThrow(() -> new ResourceNotFoundException("User not found"));
    }

    @Override
    public UserDetails updateUser(UserDetails user) {
        UserDetails updatedUser = userDetailsRepository.save(user);

        if (user.getResumeFilePath() != null) {
            try {
                String fileId = googleDriveService.uploadFile(user.getResumeFilePath());
                updatedUser.setResumeFilePath(fileId);
                userDetailsRepository.save(updatedUser);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

        return updatedUser;
    }

    @Override
    public void deleteUser(UserDetails user) {
        userDetailsRepository.findById(user.getUserId()).ifPresent(existingUser -> {
            existingUser.setIsActive('N');
            userDetailsRepository.save(existingUser);
        });
    }
}